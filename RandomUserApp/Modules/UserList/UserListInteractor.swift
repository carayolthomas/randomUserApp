//
//  UserListInteractor.swift
//  RandomUserApp
//
//  Created Thomas Carayol on 18/09/2018.
//  Copyright © 2018 Thomas Carayol. All rights reserved.
//
//  Template generated by Thomas Carayol @Appstud
//

import Foundation
import Disk

final class UserListInteractor: UserListPresenterToInteractorProtocol {
    
    weak var presenter: UserListInteractorToPresenterProtocol?
    
    func getUserListFromAPI(result: Int, page: Int) {
        do {
            let request = try APIRouter.getUserList(result: result, page: page).asURLRequest()
            
            let completionHandler: (Data?, URLResponse?, Error?) -> Void = { (data, response, error) in
                if let error = error {
                    DispatchQueue.main.async {
                        self.presenter?.getUserListFromAPIError(error: error.localizedDescription)
                    }
                } else {
                    if let data = data {
                        do {
                            let decodedData = try JSONDecoder().decode(UserListEntity.self, from: data)
                            DispatchQueue.main.async {
                                self.presenter?.getUserListFromAPISuccess(response: decodedData)
                            }
                        } catch {
                            DispatchQueue.main.async {
                                self.presenter?.getUserListFromAPIError(error: error.localizedDescription)
                            }
                        }
                    } else {
                        DispatchQueue.main.async {
                            self.presenter?.getUserListFromAPIError(error: APIRouterError.emptyResponseBody.localizedDescription)
                        }
                    }
                }
            }
            
            URLSession.shared.dataTask(with: request, completionHandler: completionHandler).resume()
            
        } catch {
            self.presenter?.getUserListFromAPIError(error: error.localizedDescription)
        }
    }
    
    func getUserListFromStorage() {
        DispatchQueue.global(qos: .utility).async {
            do {
                let entities = try Disk.retrieve("RandomUserApp/entities.json", from: .applicationSupport, as: UserListEntity.self)
                DispatchQueue.main.async {
                    self.presenter?.getUserListFromStorageSuccess(response: entities)
                }
            } catch {
                print("⛔️ Error while retrieving users from disk.")
                DispatchQueue.main.async {
                    self.presenter?.getUserListFromStorageError(error: NSLocalizedString("ErrorRetrieveUsersStorage", tableName: "UserList", comment: ""))
                }
            }
        }
    }
    
    func storeUserEntities(entities: UserListEntity?) {
        guard let entities = entities else {
            return
        }
        
        DispatchQueue.global(qos: .utility).async {
            do {
                try Disk.save(entities, to: .applicationSupport, as: "RandomUserApp/entities.json")
            } catch {
                print("⛔️ Error while saving users to disk.")
            }
        }
    }
    
    func clearUserListFromStorage() {
        DispatchQueue.global(qos: .utility).async {
            do {
                try Disk.clear(.applicationSupport)
            } catch {
                print("⛔️ Error while deleting users from disk.")
            }
        }
    }
}
