//
//  UserListPresenter.swift
//  RandomUserApp
//
//  Created Thomas Carayol on 18/09/2018.
//  Copyright Â© 2018 Thomas Carayol. All rights reserved.
//
//  Template generated by Thomas Carayol @Appstud
//

import UIKit

final class UserListPresenter: UserListViewToPresenterProtocol {
    
    weak var view: UserListPresenterToViewProtocol?
    var interactor: UserListPresenterToInteractorProtocol?
    var router: UserListPresenterToRouterProtocol?

    var data: UserListEntity?
    
    let loadingOffset: Int = 5
    var shouldRetrieveMoreUsers: Bool = true
    var pageSize: Int = 20
    
    init(view: UserListPresenterToViewProtocol?, interactor: UserListPresenterToInteractorProtocol?, router: UserListPresenterToRouterProtocol?) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfRows(section: Int) -> Int {
        return self.data?.results.count ?? 0
    }
    
    func content(at indexPath: IndexPath) -> NSAttributedString? {
        guard let userData = self.data?.results[indexPath.row] else {
            return nil
        }
        
        let attributedTitle: (String) -> NSMutableAttributedString = { string in
            return NSMutableAttributedString(string: string, attributes: [.foregroundColor: UIColor.black, .font: UIFont.systemFont(ofSize: 16, weight: .regular)])
        }
        
        let attributedSubtitle: (String) -> NSAttributedString = { string in
            return NSAttributedString(string: string, attributes: [.foregroundColor: UIColor.darkGray, .font: UIFont.systemFont(ofSize: 14, weight: .light)])
        }
        
        let attributedContent = attributedTitle("\(userData.name.first.capitalized) \(userData.name.last.capitalized)\n")
        attributedContent.append(attributedSubtitle(userData.email))
        
        return attributedContent
    }
    
    func didSelectRow(at indexPath: IndexPath) {
        guard let userData = self.data?.results[indexPath.row] else {
            return
        }
        
        self.router?.showDetails(from: self.view, with: userData)
    }
    
    func willDisplayRow(at indexPath: IndexPath) {
        guard let data = self.data else {
            return
        }
        
        if indexPath.row == data.results.count - self.loadingOffset {
            self.getUsers(pageNumber: data.info.page + 1)
        }
    }
    
    func viewDidLoad() {
        self.view?.updateNavigationBar()
        self.view?.showTableView()
        self.view?.showCenteredLoading()
        self.getUsers(pageNumber: 1)
    }
    
    func viewWillAppear() {
        self.view?.deselectRows()
    }
}

extension UserListPresenter {
    func getUsers(pageNumber: Int) {
        if self.shouldRetrieveMoreUsers {
            self.interactor?.getUserListFromAPI(result: self.pageSize, page: pageNumber)
        }
    }
}

extension UserListPresenter: UserListInteractorToPresenterProtocol {
    
    func getUserListFromAPISuccess(response: UserListEntity) {
        // If we can't retrieve enough user, then we stop.
        if response.info.results < self.pageSize {
            self.shouldRetrieveMoreUsers = false
        }
        
        var offset: Int = 0
        
        if let _ = self.data {
            offset = self.data?.results.count ?? 0
            self.data?.results.append(contentsOf: response.results)
            self.data?.info = response.info
        } else {
            self.data = response
            self.view?.hideCenteredLoading()
        }
        
        let indexPaths = response.results.enumerated().map({ return IndexPath(row: offset + $0.offset, section: 0) })
        self.view?.insertRows(at: indexPaths)
        
        self.interactor?.storeUserEntities(entities: self.data)
    }
    
    func getUserListFromAPIError(error: String) {
        let message = "\(error) \(NSLocalizedString("ShowingOldData", tableName: "UserList", comment: ""))"
        self.view?.showError(error: message)
        self.interactor?.getUserListFromStorage()
    }
    
    func getUserListFromStorageSuccess(response: UserListEntity) {
        self.data = response
        self.shouldRetrieveMoreUsers = false
        
        self.view?.hideCenteredLoading()
        let indexPaths = response.results.enumerated().map({ return IndexPath(row: $0.offset, section: 0) })
        self.view?.insertRows(at: indexPaths)
    }
    
    func getUserListFromStorageError(error: String) {
        self.view?.showError(error: error)
    }
}
