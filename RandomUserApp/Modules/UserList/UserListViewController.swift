//
//  UserListViewController.swift
//  RandomUserApp
//
//  Created Thomas Carayol on 18/09/2018.
//  Copyright Â© 2018 Thomas Carayol. All rights reserved.
//
//  Template generated by Thomas Carayol @Appstud
//

import UIKit
import SwiftEntryKit

fileprivate enum UserListViewIdentifier {
    static let userListCellIdentifier = "UserListCellIdentifier"
    static let tableViewAccessibilityIdentifier = "UserListTableViewIdentifier"
}

final class UserListViewController: UIViewController {

	var presenter: UserListViewToPresenterProtocol?
    
    lazy var tableView: UITableView = {
        let tableView = UITableView()
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: UserListViewIdentifier.userListCellIdentifier)
        tableView.tableFooterView = UIView()
        tableView.estimatedRowHeight = 55.5
        tableView.isAccessibilityElement = true
        tableView.accessibilityIdentifier = UserListViewIdentifier.tableViewAccessibilityIdentifier
        return tableView
    }()
    
    lazy var centeredLoader: UIActivityIndicatorView = {
        let loader = UIActivityIndicatorView(activityIndicatorStyle: UIActivityIndicatorViewStyle.whiteLarge)
        loader.color = UIColor.black
        loader.hidesWhenStopped = true
        return loader
    }()

    override func viewDidLoad() {
        super.viewDidLoad()
        self.presenter?.viewDidLoad()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.presenter?.viewWillAppear()
    }
}

extension UserListViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return self.presenter?.numberOfSections() ?? 0
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.presenter?.numberOfRows(section: section) ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: UserListViewIdentifier.userListCellIdentifier, for: indexPath)
        cell.textLabel?.attributedText = self.presenter?.content(at: indexPath)
        cell.textLabel?.numberOfLines = 0
        cell.textLabel?.lineBreakMode = .byWordWrapping
        cell.accessoryType = .disclosureIndicator
        cell.isAccessibilityElement = true
        return cell
    }
}

extension UserListViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.presenter?.didSelectRow(at: indexPath)
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        self.presenter?.willDisplayRow(at: indexPath)
    }
}

extension UserListViewController: UserListPresenterToViewProtocol {

    func showTableView() {
        self.view.addSubview(self.tableView)
        self.tableView.translatesAutoresizingMaskIntoConstraints = false
        self.tableView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        self.tableView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
        self.tableView.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
        self.tableView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
    }
    
    func showCenteredLoading() {
        self.centeredLoader.startAnimating()
        self.view.addSubview(self.centeredLoader)
        self.centeredLoader.translatesAutoresizingMaskIntoConstraints = false
        self.centeredLoader.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive = true
        self.centeredLoader.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true
    }
    
    func hideCenteredLoading() {
        self.centeredLoader.stopAnimating()
        self.centeredLoader.removeConstraints(self.centeredLoader.constraints)
        self.centeredLoader.removeFromSuperview()
    }
    
    func insertRows(at indexPaths: [IndexPath]) {
        self.tableView.performBatchUpdates({
            self.tableView.insertRows(at: indexPaths, with: .none)
        }, completion: nil)
    }
    
    func updateNavigationBar() {
        self.title = NSLocalizedString("Title", tableName: "UserList", comment: "")
    }
    
    func showError(error: String) {
        ToastManager.toast(message: error)
    }
    
    func deselectRows() {
        guard let indexPathForSelectedRow = self.tableView.indexPathForSelectedRow else {
            return
        }
        self.tableView.deselectRow(at: indexPathForSelectedRow, animated: true)
    }
}
